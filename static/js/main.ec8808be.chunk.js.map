{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundry.js","actions.js","api/api.js","constants.js","containers/App.js","serviceWorker.js","reducers.js","index.js"],"names":["Card","_ref","name","email","id","react_default","a","createElement","className","alt","src","concat","CardList","kittens","map","user","i","components_Card","key","SearchBox","searchfield","seachChange","type","plaseholder","onChange","Scroll","props","style","overflowY","border","height","children","ErrorBoundry","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","hasError","error","info","setState","Component","requestKittens","dispatch","link","fetch","then","response","json","data","payload","catch","App","onRequestKittens","_this$props","searchField","onSearchChange","isPending","filteredKittens","filter","kitten","toLowerCase","includes","components_SearchBox","components_Scroll","components_ErrorBoundry","components_CardList","connect","searchKittens","event","target","value","Boolean","window","location","hostname","match","initialStateSearch","initialStateKittens","isPendidng","logger","createLogger","rootReducers","combineReducers","arguments","length","undefined","action","assign","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","es","src_containers_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.ec8808be.chunk.js","sourcesContent":["import React from 'react';\n\nconst Card = ({name, email, id}) => {\n\t\n\treturn (\n\t\t<div className='tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5'>\n\t\t\t<img alt='kitten' src={`https://robohash.org/set_set4/${id}?size=200x200`} />\n\t\t\t<div>\n\t\t\t\t<h2>{name}</h2>\n\t\t\t\t<p>{email}</p>\n\t\t\t</div>\n\t\t</div>\n\t);\n}\nexport default Card;","import React from 'react';\nimport Card from './Card';\n\nconst CardList = ({ kittens }) => {\n\t/*if(true) {\n\t\tthrow new Error('Nooo!');\n\t}*/\n\treturn(\n\t\t<div>\n\t\t\t{\n\t\t\t\tkittens.map((user, i) => {\n\t\t\treturn (\n\t\t\t\t<Card \n\t\t\t\tkey={i} \n\t\t\t\tid={kittens[i].id} \n\t\t\t\tname={kittens[i].name} \n\t\t\t\temail={kittens[i].email}/>\n\t\t\t\t\t);\n\t\t\t\t})\n\t\t\t}\n\t\t</div>\n\t);\n}\nexport default CardList;","import React from 'react';\n\nconst SearchBox = ({ searchfield, seachChange }) => {\n\treturn (\n\t\t<div className='pa2'>\n\t\t\t<input \n\t\t\tclassName='pa3 ba b--green bg-lightest-blue'\n\t\t\ttype='search' \n\t\t\tplaseholder='search kittens' \n\t\t\tonChange={seachChange}\n\t\t\t/>\n\t\t</div>\n\t);\n}\nexport default SearchBox;","import React from 'react';\n\nconst Scroll = (props) => {\n\treturn (\n\t\t<div style={{ overflowY: 'scroll', border: '5px solid #0ccac4', height: '800px'}}>\n\t\t\t{props.children}\n\t\t</div>\n\t)\n};\n\nexport default Scroll;\n","import React, { Component } from 'react';\n\nclass ErrorBoundry extends Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.state = {\n\t\t\thasError: false\n\t\t}\n\t}\n\tcomponentDidCatch(error, info){\n\t\tthis.setState({ hasError: true})\n\t}\n\n\trender(){\n\t\tif(this.state.hasError) {\n\t\t\treturn <h1>Oooops. That is not good</h1>\n\n\t\t}\n\t\treturn this.props.children\n\t}\n}\nexport default ErrorBoundry;","import { apiCall } from './api/api';\nimport { CHANGE_SEARCH_FIELD, \n\t\tREQUEST_KITTENS_PENDING,\n\t\tREQUEST_KITTENS_SUCCESS,\n\t\tREQUEST_KITTENS_FAILED } from './constants.js';\n\nexport const setSearchField = (text) => ({\n\ttype: CHANGE_SEARCH_FIELD,\n\tpayload: text\t\n})\nexport const requestKittens = () => (dispatch) => {\n\tdispatch({ type: REQUEST_KITTENS_PENDING });\n\tapiCall('https://jsonplaceholder.typicode.com/users')\n\t\t//.then(response => response.json())\n\t\t.then(data => dispatch({ type: REQUEST_KITTENS_SUCCESS, payload: data }))\n\t\t.catch(error => dispatch({ type: REQUEST_KITTENS_FAILED, payload: error }))\n}","export const apiCall = (link) => \n\tfetch(link).then(response => response.json())","export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD';\nexport const REQUEST_KITTENS_PENDING ='REQUEST_KITTENS_PENDING';\nexport const REQUEST_KITTENS_SUCCESS ='REQUEST_KITTENS_SUCCESS';\nexport const REQUEST_KITTENS_FAILED ='REQUEST_KITTENS_FAILED';\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport CardList from '../components/CardList';\nimport SearchBox from '../components/SearchBox';\nimport Scroll from '../components/Scroll';\nimport ErrorBoundry from '../components/ErrorBoundry';\nimport './App.css';\nimport { setSearchField, requestKittens } from '../actions';\n\nconst mapStateToProps = (state) => {\n\treturn {\n\t\tsearchField: state.searchKittens.searchField,\n\t\tkittens: state.requestKittens.kittens,\n\t\tisPending: state.requestKittens.isPending\n\t\t//error: state.requestKittens.error\n\t}\n}\nconst mapDispatchToProps = (dispatch) => {\n\treturn {\n\t\tonSearchChange: (event) => dispatch(setSearchField(event.target.value)),\n\t\tonRequestKittens: () => dispatch(requestKittens())\n\t}\n}\n\n\n\nclass App extends Component {\n\t\n\tcomponentDidMount(){\n\t\tthis.props.onRequestKittens();\t\n\t}\n\n\trender() {\n\t\n\t\tconst { searchField, onSearchChange, kittens, isPending } = this.props;\n\t\tconst filteredKittens = kittens.filter(kitten => {\n\t\t\treturn kitten.name.toLowerCase().includes(searchField.toLowerCase());\n\t\t})\n\t\t\treturn (\n\t\t\n\t\t<div className='tc'>\n\t\t\t<h1 className='f1'>KittenFriends</h1>\n\t\t\t<SearchBox seachChange={onSearchChange}/>\n\t\t\t<Scroll>\n\t\t\t\t{ isPending?<h1>Loading</h1>:\n\t\t\t\t<ErrorBoundry>\n\t\t\t\t\t<CardList kittens={ filteredKittens } />\t\n\t\t\t\t</ErrorBoundry>\t\n\t\t\t}\n\t\t\t</Scroll>\n\t\t</div>\n\t\t\n\t\t);\n\t\t}\n\t\t\n\t}\n\t\n\n\t\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { CHANGE_SEARCH_FIELD, \n\t\tREQUEST_KITTENS_PENDING,\n\t\tREQUEST_KITTENS_SUCCESS,\n\t\tREQUEST_KITTENS_FAILED } from './constants.js';\n\nconst initialStateSearch = {\n\tsearchField: ''\n}\n\nexport const searchKittens = (state=initialStateSearch, action={}) => {\n\tswitch(action.type) {\n\t\tcase CHANGE_SEARCH_FIELD:\n\t\t\treturn Object.assign({}, state, { searchField: action.payload });\n\t\tdefault:\n\t\t\treturn state\n\t}\n}\nconst initialStateKittens = {\n\tisPendidng: false,\n\tkittens: [],\n\t//error: ''\n}\n\nexport const requestKittens = (state=initialStateKittens, action={}) => {\n\tswitch(action.type){\n\t\tcase REQUEST_KITTENS_PENDING:\n\t\t\treturn Object.assign({}, state, { isPendidng: true})\n\t\tcase REQUEST_KITTENS_SUCCESS:\n\t\t\treturn Object.assign({}, state, { kittens: action.payload, isPendidng: false })\n\t\tcase REQUEST_KITTENS_FAILED:\n\t\t\treturn Object.assign({}, state, { error: action.payload })\n\t\tdefault:\n\t\t\treturn state;\t\n\t}\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware, combineReducers } from 'redux';\nimport { createLogger } from 'redux-logger';\nimport thunkMiddleware from 'redux-thunk';\nimport './index.css';\nimport 'tachyons';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\nimport { searchKittens, requestKittens } from './reducers';\n\nconst logger = createLogger();\nconst rootReducers = combineReducers({ searchKittens, requestKittens })\nconst store = createStore(rootReducers, applyMiddleware(thunkMiddleware, logger))\n\nReactDOM.render(\n\t\t\t\t<Provider store={store} >\n\t\t\t\t\t<App />\n\t\t\t\t</Provider>\t\t\t\t\n\t, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}